package `12_HighlyDivisibleTriangularNumber`

/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
 */

// todo , fix the first tau function
fun main(args: Array<String>) {
    /*
    var n = 1L
    var sum = 2L
    while (tau1(sum) < 7) {
        //println(sum)
        sum += n
        n++
    }
    */
    var n = 1;
    var d = 1L;

    while (tau1(d) <= 5) {
        n++;
        d+= n;
    }
    print(d)


    //println(tau(2))
    //println(tau(3))
    //println(sum)

    //print(sum)
}

fun tau(number: Long): Int {
    var n = number
    val factors = ArrayList<Long>()
    factors.add(1)
    var div = 2L
    while (n != 0L) {
        if (n.rem(div) != 0L) {
            div += 1
        } else {
            var x = n.div(div)
            for (i in 2..x) {
                factors.add(div * i)
            }
            n /= div
            if (n == 1L) break
            factors.add(div)
        }
    }
    println(factors.toString())
    return factors.size
}

fun tau1(num: Long): Int {
    var n = num;
    var i = 2;
    var divisors = 1;

    if (num == 1L) return 1;

    while (i * i <= n) {
        var exponent = 1;
        // calculate the exponents
        while (n.rem(i) == 0L) {
            n/= i;
            exponent++;
        }
        i++;
        divisors*= exponent;
    }

    if (n == num || n > 1)
        divisors*= 1 + 1;

    return divisors;
}
